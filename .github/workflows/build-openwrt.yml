#
#
# 感谢p3terx大神的一键编译脚本
#
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# <https://github.com/P3TERX/Actions-OpenWrt.git>
#
name: 编译OpenWrt固件
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: "SSH远程"
        required: false
        default: "ssh-actions"

  #定时触发开始编译(把下面两个#去掉开启,时间设置请看定时编译说明)
  schedule:
    - cron: 0 18 * * SAT

env:
  LEDE: https://github.com/coolsnowwolf/lede
  LIENOL: https://github.com/Lienol/openwrt
  PROJECT: https://github.com/immortalwrt/immortalwrt
  GITURL: https://github.com/${{github.repository}}
  Author: ${{github.actor}}
  Run_number: ${{github.run_number}}
  Run_workflow: ${{github.workflow}}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: 编译 "${{matrix.target}}"
    strategy:
      fail-fast: false
      matrix:
        target: [Lede_x86_64]

    steps:
      - name: 准备结束
        uses: actions/checkout@v2

      - name: 检测脚本设置
        run: |
          source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
          echo "Modelfile=${{matrix.target}}" >> $GITHUB_ENV
          echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
          echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
          echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
          echo "DIY_P1_SH=${DIY_P1_SH}" >> $GITHUB_ENV
          echo "DIY_P2_SH=${DIY_P2_SH}" >> $GITHUB_ENV
          echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
          echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
          echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
          echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
          echo "UPLOAD_COWTRANSFER=${UPLOAD_COWTRANSFER}" >> $GITHUB_ENV
          echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
          echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV
          echo "REGULAR_UPDATE=${REGULAR_UPDATE}" >> $GITHUB_ENV
          echo "Updete_firmware=${Updete_firmware}" >> $GITHUB_ENV
          echo "Extension=${Extension}" >> $GITHUB_ENV
          echo "GITHUB_RELEASE=$(grep "https://github.com/[a-zA-Z0-9]" ${GITHUB_WORKSPACE}/.git/config | cut -c8-100)" >> $GITHUB_ENV

      - name: 微信通知
        uses: emon100/Action-Serverchan@v2
        if: env.SERVERCHAN_SCKEY == 'true'
        with:
          SCKEY: ${{ secrets.SCKEY }}
          text: 主人${{matrix.target}}编译开始啦
          desp: 主人您要编译的[${{matrix.target}}]固件正在努力耕耘中,请耐心等待......

      - name: 电报机器人信息通知
        run: |
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=🎉 主人您要编译的[${{ env.WXFB_MESSAGE }}]固件正在努力耕耘中,请耐心等待...... 😋" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

      - name: 整理编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /usr/lib/jvm /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: 下载"${{matrix.target}}"源码
        working-directory: /workdir
        run: |
          git clone -b "$REPO_BRANCH" --single-branch "$REPO_URL" "openwrt"
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          echo "Home=${GITHUB_WORKSPACE}/openwrt" >> $GITHUB_ENV
          echo "PATH1=${GITHUB_WORKSPACE}/openwrt/build/${{matrix.target}}" >> $GITHUB_ENV
          echo "artifact=${GITHUB_WORKSPACE}/openwrt/bin/Firmware" >> $GITHUB_ENV

      - name: 整理脚本文件
        run: |
          cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
          cp -Rf "${GITHUB_WORKSPACE}/build/common"/*.sh "${PATH1}"
          chmod -R +x "${PATH1}"
          source "${PATH1}/common.sh" && Diy_settings
          rm -rf {build,README.md}
          if [[ "${{ github.event.inputs.ssh }}" == 'ssh' ]]; then
            echo "SSHYC=true" >> $GITHUB_ENV
          fi

      - name: 加载源,patch补丁和自定义设置
        run: |
          cd openwrt
          source "${PATH1}/common.sh" && Diy_all
          if [[ "${REPO_URL}" == "${LEDE}" ]]; then
            source "${PATH1}/common.sh" && Diy_lede
          elif [[ "${REPO_URL}" == "${LIENOL}" ]]; then
            source "${PATH1}/common.sh" && Diy_lienol
          elif [[ "${REPO_URL}" == "${PROJECT}" ]]; then
            source "${PATH1}/common.sh" && Diy_immortalwrt
          fi
          /bin/bash "${PATH1}/$DIY_P1_SH"
          ./scripts/feeds clean
          ./scripts/feeds update -a && ./scripts/feeds install -a
          if [[ "${REPO_URL}" == "${LEDE}" ]]; then
            source "${PATH1}/common.sh" && Diy_lede2
            echo "NAME2=Lede" >> $GITHUB_ENV
            echo "ZUOZHE=Lean's" >> $GITHUB_ENV
          elif [[ "${REPO_URL}" == "${LIENOL}" ]]; then
            source "${PATH1}/common.sh" && Diy_lienol2
            echo "NAME2=Lienol" >> $GITHUB_ENV
            echo "ZUOZHE=lienol's" >> $GITHUB_ENV
          elif [[ "${REPO_URL}" == "${PROJECT}" ]]; then
            source "${PATH1}/common.sh" && Diy_immortalwrt2
            echo "NAME2=Project" >> $GITHUB_ENV
            echo "ZUOZHE=ctcgfw" >> $GITHUB_ENV
          fi
          source "${PATH1}/common.sh" && Diy_all2
          if [ -n "$(ls -A "${PATH1}/files" 2>/dev/null)" ]; then
            cp -Rf "${PATH1}/files" "${Home}" && chmod -R +x ${Home}/files
          fi
          if [ -n "$(ls -A "${PATH1}/diy" 2>/dev/null)" ]; then
            cp -Rf "${PATH1}"/diy/* "${Home}"
          fi
          if [ -n "$(ls -A "${PATH1}/patches" 2>/dev/null)" ]; then
            find "${PATH1}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 --forward --no-backup-if-mismatch"
          fi
          /bin/bash "${PATH1}/$DIY_P2_SH"
          ./scripts/feeds install -a
          [ -e "$PATH1/$CONFIG_FILE" ] && mv "$PATH1/$CONFIG_FILE" .config
          if [[ "${REGULAR_UPDATE}" == "true" ]]; then
            echo "Compile_Date=$(date +%Y%m%d%H%M)" > $GITHUB_WORKSPACE/Openwrt.info
            source "${PATH1}/upgrade.sh" && Diy_Part1
          fi

      - name: SSH远程连接
        uses: P3TERX/ssh2actions@v1.0.0
        if: env.SSH_ACTIONS == 'true' || (github.event.inputs.ssh == 'ssh' && github.event.inputs.ssh  != 'false')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      # - name: 准备就绪
      #   run: |
      #     cd openwrt
      #     source "${PATH1}/common.sh" && Diy_chajian
      #     make defconfig
      #     source "${PATH1}/common.sh" && Diy_adgu
      #     if [ "${REGULAR_UPDATE}" == "true" ]; then
      #       source "${PATH1}/upgrade.sh" && Diy_Part2
      #     fi

      - name: 编译信息
        run: |
          cd openwrt
          source "${PATH1}/upgrade.sh"
          source "${PATH1}/common.sh" && Diy_xinxi

      - name: 下载软件包
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 开始编译固件
        id: compile
        run: |
          cd openwrt
          echo -e "$(($(nproc)+1)) thread compile"
          make -j$(($(nproc)+1)) || make -j1 V=s
          echo "::set-output name=status::success"
          echo "date=$(date "+%y.%m.%d-%H%M")" >> $GITHUB_ENV
          echo "date1=$(date "+%Y年%m月%d号-%H点%M分")" >> $GITHUB_ENV
          echo "date2=$(date "+%Y%m%d%H%M%S")" >> $GITHUB_ENV
          DEVICE="$(awk -F '[="]+' '/TARGET_BOARD/{print $2}' .config)"
          SUBTARGET="$(awk -F '[="]+' '/TARGET_SUBTARGET/{print $2}' .config)"
          if [ "${DEVICE}" == "x86" ]; then
           echo "NAME1=x86-${SUBTARGET}" >> $GITHUB_ENV
          elif [[ ${{matrix.target}} =~ (Lede_phicomm_n1|Project_phicomm_n1) ]]; then
           echo "NAME1=N1,Vplus,Beikeyun,L1Pro,S9xxx" >> $GITHUB_ENV
          else
           grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > NAME1
           [ -s NAME1 ] && echo "NAME1=$(cat NAME1)" >> $GITHUB_ENV
          fi

      - name: 上传bin文件夹(固件+ipk)在github actions
        uses: actions/upload-artifact@v2
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin_${{ env.NAME2 }}_${{ env.NAME1 }}_${{ env.date }}
          path: openwrt/bin

      - name: 整理固件文件夹
        id: organizer
        run: |
          cd openwrt
          if [[ "${REGULAR_UPDATE}" == "true" ]]; then
            source "${PATH1}/upgrade.sh" && Diy_Part3
          fi
          if [ -n "$(ls -A "bin/targets/x86" 2>/dev/null)" ]; then
            find bin/targets/x86/* -name "*kernel*" | xargs -i mv -f {} bin/targets
          fi
          cd bin/targets/*/*
          rm -rf packages && mkdir packages
          find -name "*feeds.buildinfo*" | xargs -i mv -f {} packages
          find -name "*version.buildinfo*" | xargs -i mv -f {} packages
          find -name "*sha256sums*" | xargs -i mv -f {} packages
          find -name "*manifest*" | xargs -i mv -f {} packages
          find -name "*vmlinuz*" | xargs -i mv -f {} packages
          find -name "*Image*" | xargs -i mv -f {} packages
          find -name "*.vmdk*" | xargs -i mv -f {} packages
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "BOT=TRUE" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: 上传固件在github actions
        uses: actions/upload-artifact@v2
        if: steps.organizer.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
        with:
          name: OpenWrt-${{ env.NAME2 }}-${{ env.NAME1 }}-firmware-${{ env.date }}
          path: ${{ env.FIRMWARE }}

      - name: 把定时更新固件发布到云端
        uses: softprops/action-gh-release@v1
        if: steps.organizer.outputs.status == 'success' && env.REGULAR_UPDATE == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        with:
          name: 定时升级云端地址
          tag_name: update_Firmware
          files: ${{ env.artifact }}/*

      - name: 整理发布信息
        if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        run: |
          echo "☆  发布于$(date +"%Y年%m月%d号-%H点%M分")(#${{github.run_number}})" > update_log.txt
          echo "☆  源码 : ${{ env.REPO_URL }}" >> update_log.txt
          echo "☆  分支 : ${{ env.REPO_BRANCH }}" >> update_log.txt
          echo "☆  感谢源码作者[ ${{ env.ZUOZHE }}大神 ]无私分享！" >> update_log.txt

      - name: 发布固件
        uses: ncipollo/release-action@v1
        if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        with:
          name: ${{ env.date1 }} 「 ${{ env.NAME2 }}-${{ env.NAME1 }} 」固件
          tag: ${{ env.date2 }}
          token: ${{ secrets.REPO_TOKEN }}
          body: |
            ☆  发布于${{env.date1}}
            ☆  源码 : ${{ env.REPO_URL }}
            ☆  分支 : ${{ env.REPO_BRANCH }}
            ☆  感谢源码作者[ ${{ env.ZUOZHE }}大神 ]无私分享！"
          artifacts: "${{ env.FIRMWARE }}/*"

      - name: 电报机器人信息通知
        run: |
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=我亲爱的✨主人✨您要编译的[ ${{ env.NAME2 }}-${{ env.NAME1 }} ]固件顺利编译完成了！

            完成时间：${{ env.date1 }}

            发布地址：${{ env.GITHUB_RELEASE }}/releases

            祝小主人见人爱，💐花见花开，车见车载，天天好心情🎈！！！" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
